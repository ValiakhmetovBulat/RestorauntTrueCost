@page "/management/orders/archive"
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Roles = "Manager,Admin")]
@using RestorauntTrueCost.Shared.Entities
@inject HttpClient Http
@inject ViewNavbarService ViewNavBar
@inject IJSRuntime jsRuntime

<PageTitle>Администраотор - Архив отзывов</PageTitle>

<AuthorizeView Roles="Manager,Admin">
    <div class="management-container">

        <div class="nav-management">
            <a class="management-title" href="/management/orders/incoming">Ближайшие заказы</a>
            <a class="management-title active-management-title">Архив заказов</a>         
            @if (userRole == "Admin")
            {
                <a class="management-title" href="/management/users">Пользователи</a>
                <a class="management-title" href="/management/menu">Позиции меню</a>
            }
            <a class="management-title" href="/management/reviews">Отзывы</a>
        </div>

        <br />
        <div class="row">
            <div class="input-group col">
                <input type="text" class="form-control" placeholder="Поиск..."
                       @bind="SearchString" @bind:event="oninput" @onkeyup="SearchOrder" />
                @if (SearchString.Length > 0)
                {
                    <div class="input-group-append">
                        <button class="btn btn-danger" @onclick="ResetSearch">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                }
            </div>
        </div>
        <br />
        @if (SearchOrderData == null)
        {
            <p><em>Загрузка...</em></p>
        }
        else
        {
            <table class="table table-striped align-middle table-bordered">
                <thead class="table-success">
                    <tr>
                        <th>ID</th>
                        <th>Дата создания заказа</th>
                        <th>ФИО гостя</th>
                        <th>Общая сумма</th>
                        <th>Статус заказа</th>
                        <th>Забронированные столы</th>
                        <th>Время</th>
                        <th>Email</th>
                        <th>Номер телефона</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in SearchOrderData)
                    {

                        <tr>
                            <td>@order.Id</td>
                            <td>@order.CreatedDate</td>
                            <td>@order.User</td>
                            <td>@order.TotalSum</td>
                            <td>@order.OrderStatus.Name</td>
                            <td>
                                @{
                                    string reservedTables;
                                    int countTables = 1;

                                    foreach (var item in order.TableOrders)
                                    {
                                        reservedTables = $"{countTables}. {item.Table.TableNum}";
                                        countTables++;
                                        @reservedTables
                                        <br />
                                    }

                                }

                            </td>
                            <td>
                                @{
                                    string reservedTime;
                                    int countTime = 1;

                                    foreach (var item in order.TableOrders)
                                    {
                                        reservedTime = $"{countTime}. {item.ReservedDate.ToShortDateString()}:{item.OrderPeriod.FromTo}";
                                        countTime++;
                                        @reservedTime
                                        <br />
                                    }
                                }

                            </td>
                            <td>@order.User.Email</td>
                            <td>@order.User.Phone</td>
                            @if (userRole == "Admin")
                            {
                                <td>
                                    <button @onclick="() => DeleteOrder(order)" class="btn btn-outline-danger" role="button">
                                        Удалить
                                    </button>
                                </td>
                            }
                            <td>
                                <a href='/management/orders/edit/@order.Id' class="btn btn-custom" role="button">
                                    Редактировать
                                </a>
                            </td>
                        </tr>
                    }
                </tbody>

            </table>
        }
    </div>
</AuthorizeView>

@code {
    private string userRole;
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }

    protected List<Order> OrderList = new();
    protected List<Order> SearchOrderData = new();
    protected string SearchString { get; set; } = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        ViewNavBar.Hide();
        await GetOrder();

        var authState = await authenticationState;
        var authUser = authState.User;
        var claim = authUser.FindFirst(c => c.Type == ClaimTypes.Role);
        userRole = claim?.Value.ToString();
    }
    protected async Task GetOrder()
    {
        OrderList = await Http.GetFromJsonAsync<List<Order>>("api/order");
        OrderList = OrderList.Where(o => o.OrderStatus.Id != 2 && o.OrderStatus.Id != 1).ToList();
        SearchOrderData = OrderList;
    }

    protected void SearchOrder()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            OrderList = SearchOrderData.Where(o => o.Id.ToString().Contains(SearchString))
            .ToList();
        }
        else
        {
            OrderList = SearchOrderData;
        }
    }
    public void ResetSearch()
    {
        SearchString = string.Empty;
        OrderList = SearchOrderData;
    }

    private async Task DeleteOrder(Order order)
    {
        bool confirmed = await jsRuntime.InvokeAsync<bool>(
            "confirm",
            $"Вы действительно хотите удалить заказ: |{order.Id}|?");

        if (confirmed)
        {
            var result = await Http.DeleteFromJsonAsync<User>($"api/order/delete/{order.Id}");
            await GetOrder();
        }
    }
}

