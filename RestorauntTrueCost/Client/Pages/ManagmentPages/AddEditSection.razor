@page "/management/menu/sections/add"
@page "/management/menu/sections/edit/{sectionId:int}"
@inject HttpClient _httpClient
@inject NavigationManager _navManager
@using Microsoft.AspNetCore.Authorization;
@inject ViewNavbarService navbarView
@attribute [Authorize(Roles = "Admin")]

    <EditForm Model="@menuSection" OnValidSubmit="() => SaveSection()" class="management-container">
        @if (sectionId != 0)
        {
            <h3>Редактирование секции @sectionId</h3>
            <PageTitle>Редактирование секции @sectionId</PageTitle>
        }
        else
        {
            <h3>Добавление секции меню</h3>
            <PageTitle>Добавление секции меню</PageTitle>
        }

        <Message IsShown="IsShown" IsSuccess="IsSuccess" MessageText="@Message"></Message>

        <DataAnnotationsValidator />
        <div class="form-group row">
            <label for="sectionName" class="col-sm-2 col-form-label">
                Название на английском
            </label>
            <InputText id="sectionName" @bind-Value="@menuSection.Name" class="form-control"></InputText>
            <ValidationMessage For="@(() => menuSection.Name)" />
            <br />
            <label for="sectionNameRu" class="col-sm-2 col-form-label">
                Название на русском
            </label>
            <InputText id="sectionNameRu" @bind-Value="@menuSection.NameRU" class="form-control"></InputText>
            <br />            
        </div>
    <div class="form-group management-button-container">
            <button type="submit" class="btn btn-custom">Сохранить</button>
        <button class="btn btn-custom btn-cancel" @onclick="ReturnToManagement">Назад</button>
        </div>
    </EditForm>

@code {
    [Parameter]
    public int sectionId { get; set; }

    private Section menuSection { get; set; } = new();

    private string Message { get; set; }
    private bool IsShown { get; set; } = false;
    private bool IsSuccess { get; set; } = false;

    protected override async Task OnParametersSetAsync()
    {
        navbarView.Hide();
        if (sectionId != 0)
        {
            menuSection = await _httpClient.GetFromJsonAsync<Section>("api/section/getbyid/" + sectionId);

            if (menuSection == null)
            {
                Message = "Ошибка при загрузке секции";
                IsShown = true;
                IsSuccess = false;
            }
        }
    }

    protected void ReturnToManagement()
    {
        _navManager.NavigateTo("/management/menu");
    }

    protected async Task SaveSection()
    {
        if (menuSection.Id != 0)
        {
            var resp = await _httpClient.PutAsJsonAsync(
               "api/section/update/" + sectionId,
               menuSection);

            if (resp.IsSuccessStatusCode)
            {
                Message = "Успешно!";
                IsShown = true;
                IsSuccess = true;
            }
            else
            {
                Message = await resp.Content.ReadAsStringAsync();
                IsShown = true;
                IsSuccess = false;
            }
        }
        else
        {
            var resp = await _httpClient.PostAsJsonAsync("api/section/create", menuSection);

            if (resp.IsSuccessStatusCode)
            {
                Message = "Успешно!";
                IsShown = true;
                IsSuccess = true;
            }
            else
            {
                Message = await resp.Content.ReadAsStringAsync();
                IsShown = true;
                IsSuccess = false;
            }
        }
    }
}
