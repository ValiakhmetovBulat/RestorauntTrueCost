@page "/management/menu/positions/add"
@page "/management/menu/positions/add/{positionTypeId:int}"
@page "/management/menu/positions/edit/{menuPositionId:int}"
@inject HttpClient _httpClient
@inject NavigationManager _navManager
@using System.Net.Http.Headers
@using System.Text.Json
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Http;
@inject ViewNavbarService navbarView

@attribute [Authorize(Roles = "Admin")]

<EditForm Model="@menuPosition" OnValidSubmit="() => SaveMenuPosition()" class="management-container">
    @if (menuPositionId != 0)
    {        
        <h3>Редактирование позиции меню @menuPositionId</h3>
        <PageTitle>Редактирование позиции меню @menuPositionId</PageTitle>
    }
    else
    {
        <h3>Добавление позиции меню</h3>
        <PageTitle>Добавление позиции меню</PageTitle>
    }
    <DataAnnotationsValidator />
    <div class="form-group row">

        <label for="positionName" class="col-sm-2 col-form-label">
            Наименование
        </label>
        <InputText id="positionName" @bind-Value="@menuPosition.Name" class="form-control"></InputText>
        <ValidationMessage For="@(() => menuPosition.Name)" />
        <br />

        <label for="positionPrice" class="col-sm-2 col-form-label">
            Цена
        </label>
        <InputNumber id="sectionNameRu" @bind-Value="@menuPosition.Price" class="form-control"></InputNumber>
        <ValidationMessage For="@(() => menuPosition.Price)" />
        <br />

        <label for="positionType" class="col-sm-2 col-form-label">
            Тип позиции
        </label>
        <InputSelect id="positionType" @bind-Value="@menuPosition.PositionTypeId" class="form-control">
            @foreach (var positionType in positionTypes)
            {
                <option value="@positionType.Id">@positionType.NameRu</option>
            }
        </InputSelect>
        <br />

        <label for="positionDescription" class="col-sm-2 col-form-label">
            Описание
        </label>
        <InputText id="positionDescription" @bind-Value="@menuPosition.Decription" class="form-control"></InputText>
        <ValidationMessage For="@(() => menuPosition.Price)" />
        <br />    
        <label for="positionImage" class="col-sm-2 col-form-label">
            Фотография
        </label>
        <div class="image-download-container">
            <InputFile id="positionImage" OnChange="HandleFileSelection" accept=".jpg,.jpeg,.png"></InputFile>
            @if (!string.IsNullOrEmpty(imageData))
            {
                <img src="data:image;base64,@imageData" alt="Ошибка при загрузке изображения" class="position-image-preview" />
            }
            else if (menuPositionId != 0)
            {
                <img src="/api/menu/getimage/@menuPosition.Id" class="position-image-preview">
            }
        </div>        
    </div>
    <div class="form-group management-button-container">
        <button type="submit" class="btn btn-custom">Сохранить</button>
        <button class="btn btn-custom btn-cancel" @onclick="ReturnToManagement">Назад</button>
    </div>
</EditForm>



<Message IsShown="@IsShown" IsSuccess="@IsSuccess" MessageText="@Message"></Message>


@code {
    [Parameter]
    public int menuPositionId { get; set; }

    [Parameter]
    public int positionTypeId { get; set; }

    private bool IsShown { get; set; }
    private bool IsSuccess { get; set; }
    private string Message { get; set; } = "";

    private IBrowserFile file;
    private byte[] imageBuffer;
    private string imageData;

    private MenuPosition menuPosition = new();
    protected List<PositionType> positionTypes = new();

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        file = e.File;

        using var reader = new StreamReader(file.OpenReadStream());
        var fileBytes = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(fileBytes);

        imageData = Convert.ToBase64String(fileBytes);
    }

    protected override async Task OnParametersSetAsync()
    {
        navbarView.Hide();
        await GetPositionTypesList();
        if (menuPositionId != 0)
        {
            menuPosition = await _httpClient.GetFromJsonAsync<MenuPosition>("api/menu/getbyid/" + menuPositionId);

            if (menuPosition == null)
            {
                Message = "Ошибка при загрузке позиции меню";
                IsShown = true;
                IsSuccess = false;
            }
        }
        if (positionTypeId != 0 && menuPositionId == 0)
        {
            menuPosition.PositionTypeId = positionTypeId;
        }
    }

    protected async Task GetPositionTypesList()
    {
        positionTypes = await _httpClient.GetFromJsonAsync<List<PositionType>>("api/positionTypes");
    }

    protected void ReturnToManagement()
    {
        _navManager.NavigateTo("/management/menu");
    }

    protected async Task SaveMenuPosition()
    {
        Message = "";

        if (file != null)
        {
            string[] allowedExtensions = { ".jpg", ".jpeg", ".png" };

            string fileExtension = System.IO.Path.GetExtension(file.Name);

            if (!allowedExtensions.Contains(fileExtension))
            {
                IsShown = true;
                IsSuccess = false;
                Message = $"Загрузить можно только файлы с расширениями .jpg, .jpeg или .png. Файлы с расширением {fileExtension} недопустимы";
                return;
            }
            else
            {
                imageBuffer = new byte[file.Size];
                await file.OpenReadStream().ReadAsync(imageBuffer);
            }
        }

        var model = new MenuPositionDto
            {
                menuPosition = menuPosition,
                FileData = imageBuffer,
            };

        if (menuPosition.Id != 0)
        {
            var resp = await _httpClient.PutAsJsonAsync("api/menu/update/" + menuPositionId, model);

            if (!resp.IsSuccessStatusCode)
            {
                Message += await resp.Content.ReadAsStringAsync();
                IsShown = true;
                IsSuccess = false;
            }
            else
            {
                Message = "Успешно!";
                IsShown = true;
                IsSuccess = true;
            }
        }
        else
        {
            if (menuPosition.PositionTypeId == 0)
            {
                menuPosition.PositionTypeId = 1;
            }

            var resp = await _httpClient.PostAsJsonAsync("api/Menu/create", model);
            if (!resp.IsSuccessStatusCode)
            {
                Message += await resp.Content.ReadAsStringAsync();
                IsShown = true;
                IsSuccess = false;
            }
            else
            {
                Message = "Успешно!";
                IsShown = true;
                IsSuccess = true;
            }
        }
    }
}
