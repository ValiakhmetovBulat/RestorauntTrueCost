@page "/management/menu/positions/add"
@page "/management/menu/positions/edit/{menuPositionId:int}"
@inject HttpClient _httpClient
@inject NavigationManager _navManager
@using Microsoft.AspNetCore.Authorization;
@inject ViewNavbarService navbarView
@attribute [Authorize(Roles = "Admin")]

<EditForm Model="@menuPosition" OnValidSubmit="() => SaveMenuPosition()" class="management-container">
    @if (menuPositionId != 0)
    {        
        <h3>Редактирование позиции меню @menuPositionId</h3>
        <PageTitle>Редактирование позиции меню @menuPositionId</PageTitle>
    }
    else
    {
        <h3>Добавление позиции меню</h3>
        <PageTitle>Добавление позиции меню</PageTitle>
    }
    <DataAnnotationsValidator />
    <div class="form-group row">

        <label for="positionName" class="col-sm-2 col-form-label">
            Наименование
        </label>
        <InputText id="positionName" @bind-Value="@menuPosition.Name" class="form-control"></InputText>
        <ValidationMessage For="@(() => menuPosition.Name)" />
        <br />

        <label for="positionPrice" class="col-sm-2 col-form-label">
            Цена
        </label>
        <InputNumber id="sectionNameRu" @bind-Value="@menuPosition.Price" class="form-control"></InputNumber>
        <ValidationMessage For="@(() => menuPosition.Price)" />
        <br />

        <label for="positionType" class="col-sm-2 col-form-label">
            Тип позиции
        </label>
        <InputSelect id="positionType" @bind-Value="@menuPosition.PositionTypeId" class="form-control">
            @foreach (var positionType in positionTypes)
            {
                <option value="@positionType.Id">@positionType.NameRu</option>
            }
        </InputSelect>
        <br />

        <label for="positionDescription" class="col-sm-2 col-form-label">
            Описание
        </label>
        <InputText id="positionDescription" @bind-Value="@menuPosition.Decription" class="form-control"></InputText>
        <ValidationMessage For="@(() => menuPosition.Price)" />
        <br />

        <label for="positionImage" class="col-sm-2 col-form-label">
            Фотография
        </label>
        <InputFile OnChange="@LoadFiles"></InputFile>
        <Message IsShown="@IsShown" IsSuccess="@IsSucess" MessageText="@Message"></Message>
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-custom">Сохранить</button>
        <button class="btn-google custom-btn-google" @onclick="ReturnToManagement">Назад</button>
    </div>
</EditForm>



@code {
    private bool IsShown { get; set; }
    private bool IsSucess { get; set; }
    private string Message { get; set; } = "";

    [Parameter]
    public int menuPositionId { get; set; }

    private MenuPosition menuPosition = new();
    protected List<PositionType> positionTypes = new();

    private List<string> errors = new();
    private long maxFileSize = 1024 * 1024 * 3; // 3 Mb
    private int maxAllowedFiles = 1;
    private IBrowserFile? image;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        Message = "";
        errors.Clear();
        var file = e.File;

        if (e.FileCount > maxAllowedFiles)
        {
            errors.Add("Загрузить можно только одно изображение");
            return;
        }

        if (image == null)
            return;

        if (file.Size > maxFileSize)
        {
            errors.Add("Размер изображения слишком велик");
            return;
        }

        var extenstion = Path.GetExtension(file.Name);

        if (extenstion != ".jpeg" && extenstion != ".png" && extenstion != ".jpg")
        {
            errors.Add("Недопустимый формат файла");
            return;
        }

        image = file;
    }

    protected override async Task OnParametersSetAsync()
    {
        navbarView.Hide();
        await GetPositionTypesList();
        if (menuPositionId != 0)
        {
            menuPosition = await _httpClient.GetFromJsonAsync<MenuPosition>("api/menu/getbyid/" + menuPositionId);
        }
    }

    protected async Task GetPositionTypesList()
    {
        positionTypes = await _httpClient.GetFromJsonAsync<List<PositionType>>("api/positionTypes");
    }

    protected void ReturnToManagement()
    {
        _navManager.NavigateTo("/management/menu");
    }

    protected async Task SaveMenuPosition()
    {
        if (errors.Count > 0)
        {
            IsShown = true;
            IsSucess = false;
            foreach (var error in errors)
            {
                Message += error;
                return;
            }
        }

        if (menuPosition.Id != 0)
        {
            await _httpClient.PutAsJsonAsync(
                "api/user/update/" + menuPositionId,
                menuPosition);
        }
        else
        {
            if (menuPosition.PositionTypeId == 0)
            {
                menuPosition.PositionTypeId = 1;
            }
            var model = new MenuPositionDto
            {
                formFile = image,
                menuPosition = menuPosition,
            };
            var resp = await _httpClient.PostAsJsonAsync("api/Menu/create", model);
            if (!resp.IsSuccessStatusCode)
            {
                Message += await resp.Content.ReadAsStringAsync();
                IsShown = true;
                IsSucess = false;
            }
            else
            {
                Message = "Успешно!";
                IsShown = true;
                IsSucess = true;
            }
        }
    }
}
